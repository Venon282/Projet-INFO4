/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 09.04.2022 14:03:48

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7344;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3168 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*32] = { 
  /* [0][0][][] */ -65,-76,-92,-29,-12,-38,-25,5,6,-38,-49,-12,-25,32,-2,-17,21,46,20,48,12,59,31,38,63,63,-15,31,1,-53,-66,-43, -31,-78,-17,-37,-71,-25,-39,-76,13,-13,0,-58,-46,28,48,-15,49,48,86,67,29,24,32,74,11,6,50,23,-25,-41,-2,-72, -44,-127,-95,-64,-40,-14,-86,0,9,-23,-61,-81,-65,-18,-26,5,37,22,31,78,75,47,59,30,-16,-29,-8,4,-16,-1,-42,-36, 
  /* [1][0][][] */ -68,-25,-11,-18,-1,-68,-46,-61,-12,25,27,-127,18,-3,-47,39,3,58,75,23,-28,59,-42,-92,-16,-33,-22,-13,-27,109,9,-12, -85,-43,13,4,1,-65,-24,8,-28,8,10,-47,-51,22,22,-20,62,108,55,69,-35,-10,-17,-80,-69,-15,-29,-33,48,106,85,69, -32,11,23,1,-34,-28,-31,51,34,6,-15,10,-54,23,34,73,-50,53,77,94,57,-1,-4,-86,-19,-25,-21,-3,93,82,4,98, 
  /* [2][0][][] */ 14,-98,-101,-5,-106,-25,-52,65,-6,-10,29,75,40,26,-12,-60,4,10,16,17,-84,-39,-39,53,2,-70,-76,-117,-113,-40,-19,81, 127,-5,-41,7,0,21,46,24,-8,10,27,53,-4,73,14,-44,-22,-7,77,-34,16,-46,18,10,82,-47,-106,-34,-79,-49,-8,72, 122,49,-51,39,-4,29,37,52,42,28,46,0,80,70,10,9,-50,-31,88,-4,27,-77,45,74,24,-70,-41,-70,-25,25,41,55, 
  /* [3][0][][] */ -14,29,-51,5,55,-13,25,9,-33,-19,7,24,25,59,84,-6,31,10,-59,-32,12,36,32,-41,31,23,26,40,-13,7,-30,-65, 37,-41,-60,-43,1,64,16,-49,-27,-25,18,-3,66,60,91,47,17,51,-60,23,-6,-25,-27,42,-4,60,24,12,5,12,-10,-127, 24,0,-34,-25,35,40,44,-59,-71,0,7,21,-23,-20,80,-8,23,-16,27,-33,28,-12,25,4,7,3,40,79,49,-10,-18,-122, 
  /* [4][0][][] */ -77,6,-9,59,-11,-65,-21,18,-49,77,41,65,6,26,-44,-117,-28,-51,-14,-56,-17,-44,-2,-52,26,13,-28,-80,26,-46,29,15, 20,-12,-13,-10,16,90,-63,71,11,115,19,18,54,31,-89,-102,-32,-5,22,-68,-80,-38,-58,-11,79,-51,-46,12,-35,-45,-7,127, -36,69,4,75,-26,9,63,80,10,87,99,42,68,-29,17,-52,-60,-11,69,33,33,-42,-48,-4,48,32,38,-45,42,27,21,56, 
  /* [5][0][][] */ 80,55,69,67,75,-53,-54,-38,18,-67,33,2,33,-20,-35,50,78,127,30,37,15,45,3,-37,-6,-28,66,-17,-16,36,21,22, -37,32,11,78,60,-106,-90,-70,-84,-72,-48,36,-43,1,-7,35,-39,58,-24,-118,-67,-59,-102,-92,-21,-78,22,-78,-75,-108,-125,-82, 78,85,83,78,45,41,0,28,-24,36,76,38,-54,57,12,62,66,87,56,-48,36,18,15,33,44,-67,1,73,49,57,-29,86, 
  /* [6][0][][] */ -127,-108,-86,-78,-52,-23,43,-9,-70,-26,-80,-5,3,-72,-33,-40,-24,-89,-73,-60,-28,9,-11,12,-55,-64,-22,18,61,-28,-50,-91, -43,18,5,55,-9,-29,-21,66,19,-22,-5,57,22,17,-10,-38,5,-37,-14,32,37,55,2,68,-35,24,14,116,72,76,69,-2, -100,-65,-37,-25,16,16,51,9,-1,-62,-8,45,31,34,-24,2,-44,8,-17,8,29,20,67,24,-3,46,67,73,54,52,21,-6, 
  /* [7][0][][] */ -23,-64,-91,-36,-34,9,-8,89,49,114,-16,38,45,106,9,-45,-80,-3,38,-50,38,-43,58,83,79,63,-43,-60,14,9,-61,-28, -7,-92,-95,-113,32,42,69,75,51,90,41,104,-32,51,67,3,31,-14,-29,29,-52,-54,49,-24,47,14,13,-62,-54,-77,50,-39, 38,-11,-20,-83,-13,127,37,63,69,125,-23,-29,-38,83,38,-110,-109,-67,-65,-11,31,-28,49,79,-29,33,-67,-26,-56,-1,-35,32, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,32 } };
const TfArray<8, float> quant6_scale = { 8, { 0.00461529940366745, 0.003573012538254261, 0.0036335056647658348, 0.004911359865218401, 0.0035607744939625263, 0.0034258016385138035, 0.0042742742225527763, 0.0032989822793751955, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 4770, -19510, -4436, -101, 9133, -4007, 5905, 77, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.8028513295575976e-05, 1.3957080227555707e-05, 1.4193381502991542e-05, 1.9184999473509379e-05, 1.3909275367041118e-05, 1.3382037650444545e-05, 1.6696383681846783e-05, 1.2886649528809357e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 1,-59,-127,96,-52,-27,35,-15, 107,-49,-100,23,-47,-23,28,-25, 71,-64,-23,79,-17,51,26,17, 
  /* [1][0][][] */ -11,108,-121,-15,34,-49,17,58, -4,20,-89,61,16,-18,1,23, 91,127,-86,122,68,-34,-29,58, 
  /* [2][0][][] */ -17,56,27,5,2,117,-19,-13, 108,8,17,127,-19,50,-47,79, 29,-27,-33,-11,-33,28,-39,29, 
  /* [3][0][][] */ 2,-22,15,21,-16,125,-4,54, 23,-36,14,127,-10,96,41,8, 38,-69,-8,36,-61,55,8,-9, 
  /* [4][0][][] */ 18,15,91,22,17,-25,-22,42, -4,15,113,14,-3,-27,-26,70, 65,-4,127,70,-22,14,-28,80, 
  /* [5][0][][] */ 16,-41,2,7,77,50,-20,75, -24,-59,30,6,60,43,-55,-7, -24,-35,127,-13,85,-16,-30,55, 
  /* [6][0][][] */ 45,31,127,23,14,58,-9,20, 21,11,96,-21,-5,71,-28,-21, -12,33,94,-28,9,-30,-10,-26, 
  /* [7][0][][] */ -121,-24,108,5,-23,127,29,-35, -103,-22,95,25,59,119,68,-54, -91,-46,56,23,3,63,-15,2, 
  /* [8][0][][] */ -43,-30,127,-11,19,-14,-15,88, -45,-44,51,41,77,-19,-21,95, -36,-41,90,-31,29,-40,-19,65, 
  /* [9][0][][] */ -127,15,-40,1,41,39,-27,-17, -116,94,17,-12,35,24,81,-19, -110,43,-5,6,23,-17,49,-3, 
  /* [10][0][][] */ 5,65,-37,-37,-14,-66,14,-83, 86,82,-40,-22,39,26,121,-125, 18,74,-53,-38,-42,-41,127,-84, 
  /* [11][0][][] */ -32,-40,-103,31,-4,-66,81,1, -56,34,-79,-17,-17,-42,43,47, -9,3,-127,44,53,-76,84,13, 
  /* [12][0][][] */ 3,76,-125,-27,111,56,50,-33, -33,50,-46,-26,118,-47,70,43, -29,51,-127,-32,63,24,-10,52, 
  /* [13][0][][] */ -24,-59,-48,-28,-44,-35,-5,-114, -32,-38,53,-46,8,35,12,-106, -8,-22,127,25,23,57,127,-33, 
  /* [14][0][][] */ 13,64,-17,32,-42,127,-45,-67, 11,76,-26,15,65,51,-9,-63, -10,82,13,-12,-20,95,-15,-51, 
  /* [15][0][][] */ 127,14,-30,45,-16,-16,-14,-1, 74,12,-48,-9,1,26,33,16, 86,-8,-19,-15,-11,53,-9,19, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0057054581120610237, 0.0039170286618173122, 0.0053250682540237904, 0.0051212930120527744, 0.0087332464754581451, 0.0067329816520214081, 0.0097659286111593246, 0.0062275594100356102, 0.0067570777609944344, 0.0075428495183587074, 0.0055890455842018127, 0.0055752648040652275, 0.0050953151658177376, 0.0079130912199616432, 0.0049435109831392765, 0.0084488242864608765, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -1597, -11514, -5145, -2623, 953, -516, -1903, -1210, 4179, 3330, -579, 5561, 1426, 1605, -279, -1321, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 5.6805114581948146e-05, 3.8999020034680143e-05, 5.3017847676528618e-05, 5.098900874145329e-05, 8.6950611148495227e-05, 6.703542749164626e-05, 9.7232281405013055e-05, 6.2003302446100861e-05, 6.7275330366101116e-05, 7.5098694651387632e-05, 5.5646079999860376e-05, 5.5508873629150912e-05, 5.0730363000184298e-05, 7.8784920333418995e-05, 4.9218961066799238e-05, 8.411883027292788e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[9*400] = { 
  -2, -8, -5, -10, -1, -6, -19, -2, -7, -19, -10, -3, -25, -2, -30, -16, -9, -16, -1, -6, -7, 1, 5, -7, -10, -34, -4, -18, -11, 8, 4, 13, -13, 9, 7, -3, -5, 7, 25, 2, -22, -28, 18, -13, 5, -21, 26, -2, -3, 9, 4, 4, -11, 5, 5, 3, -17, -21, 30, -23, 10, -7, 17, 9, 1, -6, 11, 2, -2, 10, 5, 13, -7, -38, 26, -27, -12, 0, 17, 6, -7, -3, -7, 7, 4, 20, 19, 37, 6, -14, 10, -26, -8, 33, 30, -6, -1, -13, 5, -2, -1, 11, 10, 25, 2, -20, -22, -19, -10, 23, 9, -11, -11, 0, 13, 5, 12, 23, 26, 20, 25, -10, -36, -14, -15, 43, -10, -9, -8, -10, 9, 5, 2, 4, 6, -12, 3, -43, -14, -21, -39, -53, -19, -2, -2, -8, -3, -1, 11, 7, -8, -3, 1, -35, -29, -26, -22, 23, -19, 1, 6, 27, 27, 14, 15, 22, 15, 11, 19, -31, -43, -14, 3, 39, -20, 11, -7, 13, 32, 17, 12, 18, 23, 6, 14, -21, -104, -10, -2, -39, 1, 14, 6, 28, 12, 11, 12, 18, 7, 2, 22, -20, -24, -4, -2, 41, 8, 9, 7, 27, 22, 14, 11, 12, 19, 1, 12, -34, -64, -6, 1, 9, 9, 15, 19, 13, 12, 13, 14, 18, 5, -11, 13, -40, -18, 1, -15, 56, -15, 16, 9, 0, 13, 4, 15, 19, 15, -5, 10, -40, -24, -12, 0, 24, -14, 11, -14, -15, -2, 7, 16, 20, 7, -16, 16, -47, -27, -15, -16, -54, -13, 12, 2, -13, 9, 12, 13, 3, 23, -7, 6, -60, 0, -31, -30, 13, -5, -3, 3, -12, 16, 10, 6, 0, 19, -20, 0, -71, 8, -26, -38, -11, 5, 19, 1, -22, 4, 4, 10, 4, 13, -8, 5, -44, 27, -10, -21, 44, -22, 9, -21, -13, 9, 5, 3, 2, 11, 11, 1, -38, 20, 0, -8, -23, -14, -16, -5, 0, -11, -4, -1, 3, 3, -1, 4, -8, 11, 4, -24, 76, -12, -5, 12, -2, 25, -3, 11, 0, -14, -20, -1, -32, 4, -7, -15, 2, -35, 11, 2, 5, 3, 3, 7, -2, -14, -28, -4, -33, -46, -20, -26, -22, -17, 22, 3, -2, -3, 2, -1, 3, 7, -34, -1, -22, -58, -24, 2, 2, -22, 10, 
  -29, -34, -17, -9, -32, 6, 26, 6, -26, 9, 9, -1, 11, 13, 12, -12, -11, -10, -10, -17, -24, -2, 11, 6, -69, 24, 29, 14, 10, 62, 15, -15, 7, -7, 4, -1, -11, -11, 9, 5, -57, 6, 33, 3, 9, 42, 20, 1, -9, 1, 6, 2, -19, -20, 22, -19, -84, -9, 20, -9, -9, -1, 16, 6, 11, 6, 1, -7, -16, -9, 16, -4, -70, -5, 17, 8, 0, 19, 16, 13, 6, 5, 0, 4, -15, -6, 11, 9, -44, 11, 4, 14, 31, -6, 25, 21, 3, -1, 31, 4, -23, -7, 11, 6, -62, -15, -16, -1, 4, -9, 24, 3, 2, 6, 14, 10, -16, 6, 10, 15, -59, 15, 5, 4, 13, 12, 27, 15, 19, 27, 25, 19, -5, -2, 7, 1, -33, -21, -36, 2, -10, -21, 8, 15, 22, 33, 29, 17, 6, 19, 26, 8, -22, -6, -19, -13, -3, -5, 33, 26, 11, 5, 27, 26, 7, 16, 34, 10, -26, -1, -25, -22, 21, -62, 31, 22, -11, 0, 29, 13, -3, 15, 30, 7, -39, 6, -28, -44, -6, -83, 36, 3, -26, -11, 11, 5, -19, 14, 31, 15, -29, 8, -46, -41, 2, -28, 32, -8, -18, -10, 15, 8, -18, 4, 20, 23, -39, 7, -10, -30, 6, -3, 29, -21, -8, -24, 3, 3, -19, 20, 25, 10, -49, -6, -11, -22, -11, -30, 26, -11, -2, -19, 6, 13, -7, 0, 11, 15, -49, -7, -21, -22, -10, -27, 11, 10, 0, 1, 14, 22, -3, -3, -6, 9, -44, -16, -3, -16, -10, -20, 14, 10, 28, -5, 22, 17, -2, -8, 10, -11, -57, -33, -6, -9, -20, -48, 10, 18, 12, -10, 13, 13, -16, -17, -13, 3, -52, 4, -3, -5, -9, 35, 9, -8, 18, -23, 13, 9, -11, -5, -31, -4, -26, -21, 1, -6, -22, 23, -10, 5, 29, -29, -19, 1, -31, -12, -16, -2, -41, -34, -2, 6, -34, 32, -19, -5, 13, -36, -12, -13, -24, -14, -8, 8, -41, -7, 0, -8, 2, -8, 10, -1, -3, -31, -15, -13, -16, -13, 5, 4, -57, -14, 13, -20, -4, 21, -11, 8, 0, -13, 5, -5, -8, 0, 1, 11, -9, -12, 20, -4, 4, -36, 3, 8, -6, -34, -10, -8, -31, -6, -10, -9, -7, -17, 9, -13, -19, -81, -2, 0, 
  -11, 34, 10, -4, 4, 21, 47, -21, 21, 0, 14, -10, 5, -66, -12, -1, -41, 1, 3, -17, -4, 6, 27, -17, 17, -25, -6, -24, 9, -70, 12, -11, -18, -3, -13, -33, 1, 17, 24, -5, 11, -4, 12, -28, 6, 8, 15, -11, -12, 9, 7, -9, 2, 24, 33, 8, 36, -3, 22, -23, 15, -35, -1, -5, -13, 9, -3, -13, 1, 8, 35, -22, 22, -28, 4, -8, 6, -61, 5, -7, -10, 6, -11, -25, -8, 18, 23, -21, 15, -28, -14, -26, -13, -52, 6, -7, -9, 1, -18, -10, -9, 10, 16, -2, 7, -23, -11, -16, -1, -29, 8, -11, -9, 6, 12, 0, 3, 7, 16, -34, 7, -49, -12, -18, -30, -65, -7, -5, 8, 16, -3, 3, 8, 22, 35, -31, -3, -28, 8, -4, -27, 15, 4, 13, 11, 27, 12, 8, 10, -7, 36, -30, 4, -25, 27, 7, -2, -35, 25, 27, 21, 16, 13, -4, -3, -17, 28, -49, -34, -22, 27, 11, 12, -52, 28, 23, 20, 14, 10, -1, 6, -6, 19, -49, -21, -26, 26, 2, 9, -50, 17, 20, 11, 23, -7, -5, -6, -2, 23, -51, -13, -17, 17, 8, -4, -48, 15, 13, 4, 19, 0, -3, -9, -16, 9, -33, -18, -5, 34, 7, 26, -20, 29, 13, 10, 8, 9, 8, 6, 14, 14, -41, 3, -13, 24, 3, 13, -38, 28, 11, 11, 13, 21, 6, 14, 24, 12, -43, 20, -26, 6, 2, 10, -57, 1, 23, 4, 15, 11, 9, 12, 28, 8, -24, 29, -37, 12, -1, 2, -19, -11, 22, 2, -4, -1, 9, 4, 33, 19, 15, 14, -20, 4, -21, -11, -20, -14, 6, 8, -9, 4, -7, -6, -4, 6, -6, -9, -12, 19, -15, -10, -27, -4, 7, 7, 8, 1, -4, -7, -4, 3, -52, -13, -54, 8, -14, -35, -48, -12, 9, -2, 13, 8, -16, -1, 29, 3, -36, 3, -29, 6, -9, -1, 18, -4, 3, 4, 8, 20, 2, 1, 23, 16, -9, 23, -8, -1, -7, 6, -35, -6, 2, 0, 11, 7, -6, 0, 18, 10, -25, 2, -15, 8, -15, -16, -60, 6, 7, -7, 6, 1, -12, -16, -5, 10, -3, -23, -5, 4, -26, -10, -47, 13, -1, -17, -1, -11, -7, -33, -2, -11, -25, -16, -6, 16, -8, 12, -18, 18, -1, 
  -48, -40, -20, -6, -28, -25, 14, 21, -6, 21, 12, 2, 9, 42, 13, -27, -35, -33, 8, 4, -35, 1, 47, 40, -1, 22, 24, 12, 4, 37, 27, -6, -44, -41, 4, 3, -24, -20, 21, 29, -5, 20, 6, 7, 16, 23, 29, -28, -33, -6, -5, -5, -59, -23, 0, 29, -19, 22, 14, -4, 11, 9, 2, -20, -46, -18, 11, -11, -38, -17, 19, 3, 12, 16, 9, 9, 11, 17, 12, -60, -52, -9, -20, -58, -35, -29, -19, -9, -5, 20, 17, 7, 4, 12, -17, -52, -29, -1, -18, -28, -49, -25, -10, 10, -4, 17, 23, 10, 16, 31, -4, -21, -10, 5, -14, -21, -50, -22, 30, 2, -14, 10, 26, 17, 12, 10, 11, 6, -32, -13, -35, -50, -47, -16, -15, 6, -5, 15, 12, 12, 11, 3, -8, -28, -48, -31, -28, -46, -54, -35, -50, -6, -19, 21, 6, -5, 9, 4, -7, -29, -39, -42, -1, -33, -46, 9, -23, -13, 3, -3, 0, 4, -4, 16, -14, -44, -48, -48, -58, -65, -52, -45, -39, -23, -7, -1, 14, -8, -8, 2, -33, -47, -19, 0, -35, -9, -41, -59, -61, -5, -42, 20, 29, 11, 5, 21, 5, 29, 7, -16, 7, -12, -65, -12, -9, 8, -26, 17, 7, 9, 15, 16, -5, -24, -31, -17, -29, -36, -31, -16, -8, 5, -3, 5, 13, 14, 13, 26, -9, -1, -18, 15, -13, -40, 3, -3, -1, 6, -5, 19, 0, 4, 18, 11, -4, -1, -22, -20, -12, -16, -9, -2, 6, 16, 11, 20, 18, -6, 17, 31, 8, 8, -16, -32, 1, 7, -33, 16, 27, 5, 2, 13, 15, 15, 20, 26, -2, 15, -39, -55, -13, -20, -31, 1, -1, -10, -12, 9, 11, -4, 0, 3, -10, -15, -12, -49, -6, -3, -47, -23, -40, -5, -6, 4, 4, -6, 6, -2, -16, -18, -25, -37, 10, -4, -23, 9, -15, 26, -7, 19, 9, -8, 10, 43, -13, -20, -64, -28, 51, 9, -6, 34, 18, 29, 47, 11, -12, 0, 11, 1, 3, -39, -59, -73, -27, -26, -19, 10, 6, 32, 34, 16, -2, -8, 12, 15, 4, -40, -36, -55, -20, -4, -23, -10, 5, 7, 18, 9, -6, 1, 1, -4, -19, -44, -127, -26, 24, 0, -4, 19, -20, 14, 31, 21, -27, -14, 14, 35, -12, -102, 
  -17, 4, 0, -8, 7, -13, 13, -18, 2, -10, -32, -1, -10, -2, -20, -23, -21, -2, 5, 3, -5, -7, -7, -28, -9, -18, -42, -11, -20, -51, -28, 4, -2, 3, 14, -7, -3, -16, -20, -58, -2, -21, -52, -15, -24, -53, -30, -17, -10, -4, 0, 7, -7, -22, -13, -22, 0, 12, -18, -5, -6, 15, 8, -20, 0, 12, 14, 14, -5, -19, -10, -3, -5, -5, -6, 8, 0, -5, 8, -5, 18, 22, -2, 7, 1, -21, -9, -22, -11, 9, 16, 0, -2, 17, -2, 4, -6, 17, -8, 0, -3, -7, -7, -16, 0, -7, -5, 4, 5, -29, -5, 5, -1, 17, 5, 3, -8, -1, -27, -23, -7, -14, -13, 8, 6, -4, 1, 1, -8, 11, -3, 12, -4, -1, -12, 18, -3, 16, 3, 21, 11, 17, -1, -22, -11, 25, -2, -3, 7, -3, -20, -18, 13, -7, -34, 16, 1, -26, -22, -15, -5, 8, -1, -14, -1, -10, -22, -25, -2, 3, 4, 8, 11, 13, -17, -19, 14, 14, 1, 2, 9, 10, -6, 24, 7, 17, 2, 15, 11, 68, 0, 1, -6, 20, 24, 11, 17, 9, 29, 10, 29, 2, -30, 8, 11, -70, -12, 1, 0, 0, -25, -8, -3, 1, -15, -39, -7, -22, -1, 9, -21, -21, -10, 7, -2, 4, -21, -8, -4, -13, -48, -20, -5, -7, 15, 5, 13, 9, -15, -23, 1, 7, -7, -11, 2, 2, -43, -23, 4, -7, 18, 7, -4, -23, -20, 2, -6, 15, 6, 8, 5, 1, -26, -31, 10, -8, 18, 12, 3, -4, -25, -4, -1, 23, 7, 2, 11, 8, -36, -15, 6, -11, 19, 16, 13, -9, -38, -11, 1, 29, 16, 9, 14, 17, -13, -12, 23, -2, 8, 20, 14, -28, -28, -8, 13, 30, 5, 8, 5, 2, -19, -3, 9, -7, 15, 18, 18, -12, -10, 9, 3, 20, 7, 14, 11, 4, -23, -19, 1, -11, 10, 19, 5, -37, -4, -3, 15, 14, 2, -8, 5, 7, -16, -32, 14, -21, 0, 18, 0, -49, -12, 0, 5, 28, 22, -2, 19, 4, -8, -18, 9, -9, 31, 18, 8, -26, 2, 29, 6, 24, 18, 3, 16, 9, 20, -45, 3, -40, -9, -2, -5, -79, -24, 10, 14, 32, 9, 6, 13, 7, 0, -65, 13, -53, 2, 1, -33, 51, -38, 11, 
  36, 42, -12, -5, -19, -19, -20, -17, -22, 6, 16, 17, 14, 8, 8, 16, 27, 6, 7, 10, -21, -19, -18, 0, -34, 8, 26, 12, 9, 2, 13, 44, 34, 23, -29, -9, -19, -25, -35, -8, -27, 2, 3, 5, 3, 2, -9, 25, 28, 10, 11, 8, -1, -1, -18, -6, -12, 10, 11, -5, 3, 2, -16, 12, 23, -26, -17, 1, -40, -12, -27, 16, -32, 6, 2, -4, 3, -7, 12, 12, 17, -2, -32, 30, -58, -2, 4, 27, -21, 12, 3, -4, 3, 1, 9, 11, 13, -2, -9, 9, -34, -21, 22, 18, -22, 6, 6, -7, 3, 7, 1, 0, -4, -20, -4, 10, -31, -25, -14, 11, -21, -9, 2, -2, -4, -3, 1, 5, 20, -26, -9, 29, -43, 10, 27, 32, -26, 14, 4, -2, 4, 30, 6, 13, 17, -13, -50, 16, -32, 15, 23, 25, -7, 15, 2, -4, 8, 31, 7, -15, 7, -13, -46, 4, -41, -37, 12, 26, 6, 10, 5, 9, 13, 15, 8, -4, -2, -6, -28, -6, -48, 2, 10, 19, -22, 10, 13, -14, -3, 16, 14, 1, -4, -36, -63, -27, -72, -12, 9, 11, -32, 14, 16, 5, -2, 9, 8, -28, -17, 5, -68, -11, -22, -27, -10, 26, -28, 20, 6, -5, 14, 6, 8, -18, 0, -15, -33, 11, -29, -2, -5, 14, -30, 5, 5, 5, 10, 17, 4, -5, -10, -36, -33, 8, -67, -20, 12, 26, -13, 15, -5, -1, 7, 31, -3, -13, -12, 1, -20, 14, -74, -32, -21, 35, -27, 15, 7, 1, 15, -1, -4, -52, -1, 23, -42, 8, -61, -50, -37, -8, -19, 15, 12, 8, 10, 9, 2, -35, 15, 16, -5, 6, -41, -65, 6, -1, -18, 11, 8, -7, 4, 7, 8, 0, 6, 24, -26, -16, -49, -1, 21, 2, -13, 15, 18, 9, 16, 10, 8, 11, 9, 4, -33, -19, -41, -42, -16, 8, -34, 20, 13, -1, 18, -4, -4, -21, 20, 2, -79, -35, -71, -53, -21, -24, -58, 9, 6, 17, 12, 10, -6, -6, 9, 26, -34, -17, -55, -54, -24, -5, -61, 0, 0, -3, 16, -10, 12, 3, 14, 16, -46, -13, -50, -29, -6, -7, -57, 11, 12, 7, 4, 19, -5, -1, 63, -11, -42, -25, -58, -33, 9, -4, -62, 14, 30, 14, 22, 4, 15, 35, 
  -22, 2, -32, -10, 17, 2, -62, 0, 17, 15, -8, 14, 6, -33, -9, -11, 29, 12, -48, -33, 4, 9, -71, -22, 16, 10, -14, 29, 6, -13, -1, -35, 26, -3, -19, -8, 0, -1, -33, 7, 19, 24, -6, 34, 16, -36, 12, -17, -11, -23, -23, -18, -2, 11, -47, 8, 16, 20, -27, 16, 18, -54, 27, -17, -7, -6, -30, -19, -3, 4, -49, 9, 22, 20, -23, 17, 13, -2, 22, -27, -4, -12, -19, -18, 8, 24, -48, 6, 41, 35, -17, 16, 23, -58, 10, -35, -6, -10, -63, -25, 8, 7, -37, -22, 22, 18, -14, 15, 13, -34, -9, -47, 3, -16, -49, -20, 10, 10, -25, -7, 24, 12, -1, 19, 8, -42, 3, -9, 2, -22, -24, -13, 12, 13, -12, 0, 24, 12, -34, 10, 3, -54, 8, -17, -29, -10, -19, -12, 8, 19, -10, 1, 20, 23, -12, 14, 20, -30, 5, -11, -6, -3, -43, -40, 9, 17, -37, -16, 22, 16, -23, 18, 11, -25, -5, -24, -49, -23, -22, -27, -15, -7, -55, -28, 15, 7, -32, 6, 25, -108, -24, -38, -22, -5, -64, -49, -13, -7, -60, -33, 3, -2, -35, -6, -19, -53, -11, -59, -27, -8, 20, -12, 3, -5, -46, -5, 9, 11, -25, 6, 8, -33, -2, -34, 0, -11, -32, -14, 5, 13, -25, -27, 22, 9, -33, 10, 15, -59, 16, -22, -8, 0, -11, -14, 14, 2, -31, -32, 14, 21, -18, 18, 4, -58, 11, -8, -10, -1, -31, -16, 6, 5, -32, -15, 13, 20, -23, 17, 15, -52, 11, -9, -14, -4, -43, -19, -1, 0, -40, -5, 12, 22, -18, 17, 17, -35, 21, -30, -10, -20, -37, -22, -3, 5, -49, -12, 12, 23, -10, 14, 23, -4, 2, -12, -5, -8, -43, -21, -3, -6, -32, 7, 10, 30, -8, 17, 20, -14, 24, -4, -10, -30, -45, -21, -2, 1, -27, 7, 6, 28, 9, 23, 20, -25, 5, -10, 0, -16, -27, -14, -3, -1, -28, 3, 12, 13, -16, 28, 20, -17, -5, -6, -15, -9, -28, -15, 0, 10, -29, 11, 19, 24, -24, 19, 28, -25, 14, -3, -12, -20, -57, -25, 1, 13, -67, -9, 21, 23, -10, 35, 30, -21, -8, -10, -20, -30, -53, -36, -8, 17, -58, -11, 12, 42, -28, 13, 42, -85, -11, -27, 
  27, 4, 21, 12, -6, 1, -17, -2, -19, -15, 9, 11, -14, -17, 2, 17, 13, -3, 5, 4, -2, 13, -16, 24, 4, -20, 2, 17, -6, 7, -5, 4, 27, 10, 10, 9, 4, 0, -37, 18, 6, -11, 2, 18, -17, 0, -23, 2, 19, 8, 12, 16, 0, 3, -37, 8, 5, -14, -14, 4, -19, 13, -30, 7, 15, -7, 12, 19, 2, 0, -27, -5, 6, -21, -14, 12, -26, 9, -29, 5, 24, 7, 3, 5, 1, -4, -22, -10, 5, -13, -20, 6, -28, -7, -31, 11, 29, -2, -8, -1, 7, -11, -5, -8, 2, -33, -18, 11, -42, 8, -22, 5, 21, 9, 0, 4, 3, -10, -10, -10, -6, -16, 10, 5, -28, 2, -17, 18, 17, -2, 11, 11, 7, -11, 11, -2, -14, -16, -9, 4, -35, -8, -25, 13, 17, 1, 0, 6, 4, -16, -15, -5, -15, 0, 11, 2, -29, 11, -17, 15, 27, -2, 7, 6, 7, -15, -2, 13, -7, -3, -14, -1, -21, 10, -5, 6, 24, -3, 18, 9, 5, -20, -1, -2, -15, -5, -1, 7, -33, -5, -4, 16, 13, 9, 1, 5, 3, -10, 0, 1, -10, -21, -6, 0, -43, 9, 0, 11, 15, 7, 9, 14, 4, -8, 0, 15, -14, -9, -5, -3, -36, 19, 16, 14, 22, -9, 10, 24, 10, -1, 12, -1, -4, -17, -6, -4, -35, -12, 14, 13, 8, -15, 4, 7, 3, -11, 23, -3, -16, -14, -35, 2, -45, -6, 2, 16, -4, -1, -13, 0, -1, -19, -15, 2, -18, 1, -35, -3, -37, 2, -6, 0, 3, -10, 1, 1, 8, -29, 7, 15, -24, 16, -19, -16, -23, -9, 7, -3, -2, -11, 2, -4, 2, -13, 3, 26, -1, 15, -22, -13, -5, 7, 19, -2, 3, -3, 9, 8, 13, -3, 21, 31, -3, 12, -36, -16, -18, -16, 19, -1, 7, 1, 15, 13, 13, -13, 20, 13, -7, -7, -22, 5, -19, -19, 16, 0, 14, -5, 4, 2, 4, -13, 13, -1, -5, 0, -20, 6, -22, -36, 18, -4, 2, -9, 4, -4, 9, -18, 13, 4, -25, -13, -12, -9, -45, -5, 8, -5, 15, -14, 9, 9, 10, -21, 2, 21, -19, 12, 3, 3, -32, 43, 14, -6, 16, -3, 7, 18, -1, -10, 3, 32, -5, 2, 0, 9, -9, -32, 15, 6, 
  0, 27, 15, -10, 13, 17, 30, 7, 10, 10, -14, -2, 23, -15, -6, 30, 1, -9, -4, -11, 10, 22, 21, -5, 7, -15, -48, -39, -1, -17, -2, 18, -5, 3, 2, 4, 11, 21, 38, 10, 4, -14, -55, -49, -18, -10, 0, 12, -26, -7, 3, -2, 9, 14, 34, -6, 6, -12, -36, -33, -21, -57, -11, 0, -23, -17, -19, -16, 11, 19, 38, -4, 3, -12, -56, -43, -7, -42, -11, 14, -40, -8, -1, 3, 16, 20, 36, 35, 20, -11, -44, -39, -18, -49, 2, -18, -6, -12, -4, 11, 13, 14, 44, 18, 18, -21, -36, -42, -15, -57, -9, -13, -7, 1, 6, 3, 15, 14, 22, 0, 20, -27, -35, -35, -18, -60, -1, -3, -3, -14, 3, 6, 10, 10, 17, -2, 6, -20, -46, -50, -7, -36, -8, 7, -35, -14, -9, -3, 6, 1, 3, 8, 5, -24, -38, -53, -20, -74, -8, -10, -31, -29, -9, -14, 0, 5, -3, -18, 7, -20, -42, -38, -20, -54, -9, -11, -31, -30, -17, -18, 1, -2, 5, -21, 3, -47, -57, -52, -29, -51, -44, -5, -32, -44, -18, -21, 5, 3, 18, -7, 8, -38, -38, -47, -21, -42, -42, -23, -31, -19, -10, -19, 8, 1, 15, -2, 6, -30, -46, -50, -9, -40, -33, -35, -38, -11, -24, -19, 15, 13, 5, 11, 15, -12, -35, -30, -11, -3, -23, -35, -19, 10, -13, -12, 13, 10, 9, 6, 14, -13, -16, -13, 5, -23, -11, -23, -11, 20, 1, 15, 16, 6, 9, -4, 7, -20, -16, -24, -15, -43, 7, 4, 19, 9, -3, 3, 18, 5, 36, 18, 9, -4, -27, -26, -7, -37, 14, 10, -6, 6, 12, 5, 11, 6, 39, 17, 3, -5, -31, -41, -2, -40, 14, -1, -7, 8, 15, 8, 11, 5, 38, 6, 7, 2, -36, -57, 12, -14, 23, -10, -16, -9, 8, 1, 11, 3, 25, 3, 3, -12, -48, -36, -12, -51, -6, -1, -22, 2, -7, 2, 2, -1, 15, -2, -1, -17, -21, -32, -14, -2, -8, 8, -29, -3, 11, -12, 17, 5, 22, 2, -3, -8, -26, -29, 3, -26, -19, -20, -26, 11, 0, 1, 19, 13, 25, 21, 1, 23, -26, -36, 10, -50, 17, -2, -43, -3, 11, 3, 23, 23, 37, 53, 17, 27, -17, -51, 16, -66, 17, -13, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 9,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0085650486871600151, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[9] = { -1034, -655, -816, 735, 437, -751, 1981, 30, -1612, };
const TfArray<1, int> tensor_dimension11 = { 1, { 9 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00021879079577047378, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0099562760442495346, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0099562760442495346, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0099562760442495346, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0099562760442495346, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.025544606149196625, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.025544606149196625, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.025544606149196625, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.025544606149196625, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,9 } };
const TfArray<1, float> quant21_scale = { 1, { 0.52337038516998291, } };
const TfArray<1, int> quant21_zero = { 1, { 52 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,9 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension0, 3168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 36, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
